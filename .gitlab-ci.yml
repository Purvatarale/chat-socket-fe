image: node:latest

stages:
  - Building
  - Testing
  - Staging
  - Release

cache:
  paths:
    - node_modules/ # Cache the node_modules directory

variables:
  SERVICE : "chat"
  SERVER_ROOT : "/var/www/html/b"
  SERVER_FOLDER : $SERVER_ROOT/$SERVICE


.before_script_template: # https://stackoverflow.com/a/54077634
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - /usr/bin/curl -s --location-trusted -u ${ldapId}:${accessToken} "https://internet.iitb.ac.in/login.php" > /dev/null
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ## 
    ## SSH_PRIVATE_KEY as a variable
    ##

    - ssh-add <(echo "$SSH_PRIVATE_KEY")


    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

staging-node-job:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: ($CI_COMMIT_BRANCH == "release" || $CI_COMMIT_BRANCH == "main" )
      when: never # do not run for release/main branches merge or commit
    - when: always


  extends: .before_script_template

  stage: Staging
#  tags:
 #   - shell


  environment:
    name: staging
    url: $STAGING_SERVER/$SERVER_FOLDER

  script:

    ## Use ssh-keyscan to scan the keys of your private server.
    ## Repeat that command if you have more than one server to connect to.
    ##
    - echo $STAGING_SERVER
    

    - ssh-keyscan -v $STAGING_SERVER
    - ssh-keyscan "$STAGING_SERVER" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts  




  #  - CI=false npm run build # no ideal to falsify CI, but a temporary fix till code is fixed
    - echo "Deploying started..."
    # - npm install -g npm-check-updates    #To avoid peer-dependencies error
    # - ncu -u
    - npm install
    # - npm i npm@latest
    # - npm audit fix
    # - ncu -u
    # -  npm install typescript@4.9.5

    # - npm install --prefer-offline # Install dependencies using cached modules (if available)
#    - npm install --prefer-offline --legacy-peer-deps # Bypasses peer dependency conflicts by ignoring the warnings and installing the required dependencies regardless of peer dependency compatibility


    - npm run build
    
    
    
    - scp -r dist/* deployer@${STAGING_SERVER}:${SERVER_FOLDER}
    # - ssh deployer@$STAGING_SERVER "sudo systemctl restart nginx"
    - echo "Finished deploying the app."


##############################################################################################################################

release-job:
  stage: Release

# https://docs.gitlab.com/ee/user/project/releases/release_cicd_examples.html
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
  #  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
    - if: $CI_COMMIT_BRANCH == "release"  # Run this job when commits are pushed or merged to the default branch
  extends: .before_script_template

  release:                                         # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: 'v0.$CI_PIPELINE_IID'                # The version is incremented per pipeline.
    description: 'v0.$CI_PIPELINE_IID'
    ref: '$CI_COMMIT_SHA'                          # The tag is created from the pipeline SHA.


  variables:
  
    FF_NETWORK_PER_BUILD: "true"     # activate container-to-container networking
    # https://stackoverflow.com/a/75832744
  environment:
    name: production
    url: $PRODUCTION_SERVER/$SERVER_FOLDER
  script:

    ## Use ssh-keyscan to scan the keys of your private server.
    ## Repeat that command if you have more than one server to connect to.
    ##
    - echo $PRODUCTION_SERVER

    - ssh-keyscan -v $PRODUCTION_SERVER
    - ssh-keyscan "$PRODUCTION_SERVER" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  #  - CI=false npm run build # no ideal to falsify CI, but a temporary fix till code is fixed
    - echo "Production deploying started..."
    - npm install --prefer-offline # Install dependencies using cached modules (if available)
    - npm run build
      
    - scp -r dist/* deployer@${PRODUCTION_SERVER}:/var/www/html/${SERVER_FOLDER}/
    - ssh deployer@$PRODUCTION_SERVER "sudo systemctl restart nginx"

    - echo "Finished deploying the app."
    - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli

